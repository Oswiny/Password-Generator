<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        gAPgAYAH8ACAB/AAgA/8AIAf/gCAf/+Bgf8=
</value>
  </data>
</root>